using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

public class OldInventorySaver : MonoBehaviour
{
    [SerializeField] private PlayerInventory playerInventory;

    public void ResetData(){
        int i = 0;
        while(File.Exists(Application.dataPath + string.Format("/{0}.inv", i))){
            File.Delete(Application.dataPath + string.Format("/{0}.inv", i));
            i++;
        }
    }

    private void OnEnable() {
        playerInventory.myInventory.Clear();
        LoadData();
    }
    private void OnDisable() {
        SaveData();
    }

    public void SaveData(){
        ResetData();
        for(int i = 0; i < playerInventory.myInventory.Count; i++){
            FileStream file = File.Create(Application.dataPath + string.Format("/{0}.inv", i));
            BinaryFormatter binary = new BinaryFormatter();
            var json = JsonUtility.ToJson(playerInventory.myInventory[i]);
            binary.Serialize(file, json);
            file.Close();
        }
    }

    public void LoadData(){
        ResetData();
        int i = 0;
        while(File.Exists(Application.dataPath + string.Format("/{0}.inv", i))){
            var temp = ScriptableObject.CreateInstance<InventoryItems>();
            FileStream file = File.Open(Application.dataPath + string.Format("/{0}.inv", i),FileMode.Open); 
            BinaryFormatter binary = new BinaryFormatter();
            JsonUtility.FromJsonOverwrite((string)binary.Deserialize(file), temp);
            file.Close();
            playerInventory.myInventory.Add(temp);
            i++;
        }
    }
}
